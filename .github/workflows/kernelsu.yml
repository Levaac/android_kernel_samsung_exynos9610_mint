name: KernelSU Development Build (Galaxy A50)

on:
  push:

jobs:
  notify:
    name: notify
    runs-on: ubuntu-latest
    steps:
     - name: Send build message to Telegram
       uses: appleboy/telegram-action@master
       env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
       with:
         to: ${{ secrets.TELEGRAM_TO }}
         token: ${{ secrets.TELEGRAM_TOKEN }}
         message: Automated Build Started for KernelSU!
     
  failure-notification:
    name: Failure Notification
    needs: [oneui-s-k-e, oneui-s-k-p, aosp-s-k-e, aosp-s-k-p]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send failure message to Telegram
        uses: appleboy/telegram-action@master
        env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Build failed for KernelSU."   
 
  oneui-s-k-e:
    name: Build One UI 4 (Enforcing ; KernelSU)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0' 
        submodules: 'true'

    - uses: szenius/set-timezone@v1.0
      with:
        timezoneLinux: "Asia/Kolkata"
        timezoneMacos: "Asia/Kolkata"
        timezoneWindows: "Indian Standard Time"

    - name: Export build branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: branch_name

    - name: Update Debian/Ubuntu Repositories
      run: sudo apt-get update

    - name: Install Debian/Ubuntu dependencies
      run: sudo apt-get install bzip2 lib32stdc++6 libc6-dev-i386 libncurses5 jq -y

    - name: Setup KernelSU
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          cd KernelSU
          echo "KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))" >> $GITHUB_ENV
          cd -

    - name: Build Mint kernel
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          ./build.sh --kernelsu --automated --device a50 --variant oneui --android 12

    - name: Prepare release package
      run: |
          mkdir -p ./release
          mv -f `find ./ -iname *.zip` ./release/

    - name: Prepare build config artifact
      run: |
          cp .config ./release/kernel_config_a50_oneui-s-k-e.txt

    - name: Upload build to Telegram
      uses: appleboy/telegram-action@master
      env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: " "
        document: ./release/*.zip
        if-no-files-found: error

  oneui-s-k-p:
    name: Build One UI 4 (Permissive ; KernelSU)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0' 
        submodules: 'true'

    - uses: szenius/set-timezone@v1.0
      with:
        timezoneLinux: "Asia/Kolkata"
        timezoneMacos: "Asia/Kolkata"
        timezoneWindows: "Indian Standard Time"

    - name: Export build branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: branch_name

    - name: Update Debian/Ubuntu Repositories
      run: sudo apt-get update

    - name: Install Debian/Ubuntu dependencies
      run: sudo apt-get install bzip2 lib32stdc++6 libc6-dev-i386 libncurses5 jq -y

    - name: Setup KernelSU
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          cd KernelSU
          echo "KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))" >> $GITHUB_ENV
          cd -

    - name: Build Mint kernel
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          ./build.sh --kernelsu --automated --device a50 --variant oneui --android 12 --permissive

    - name: Prepare release package
      run: |
          mkdir -p ./release
          mv -f `find ./ -iname *.zip` ./release/

    - name: Upload build to Telegram
      uses: appleboy/telegram-action@master
      env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: " "
        document: ./release/*.zip

  aosp-s-k-e:
    name: Build AOSP 12 (Enforcing ; KernelSU)
    if: ${{ !contains(github.event.head_commit.message, '[skip rel]') }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0' 
        submodules: 'true'

    - uses: szenius/set-timezone@v1.0
      with:
        timezoneLinux: "Asia/Kolkata"
        timezoneMacos: "Asia/Kolkata"
        timezoneWindows: "Indian Standard Time"

    - name: Export build branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: branch_name

    - name: Update Debian/Ubuntu Repositories
      run: sudo apt-get update

    - name: Install Debian/Ubuntu dependencies
      run: sudo apt-get install bzip2 lib32stdc++6 libc6-dev-i386 libncurses5 jq -y

    - name: Setup KernelSU
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          cd KernelSU
          echo "KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))" >> $GITHUB_ENV
          cd -

    - name: Build Mint kernel
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          ./build.sh --kernelsu --automated --device a50 --variant aosp --android 12

    - name: Prepare release package
      run: |
          mkdir -p ./release
          mv -f `find ./ -iname *.zip` ./release/

    - name: Upload build to Telegram
      uses: appleboy/telegram-action@master
      env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: " "
        document: ./release/*.zip
        
  aosp-s-k-p:
    name: Build AOSP 12 (Permissive ; KernelSU)
    if: ${{ !contains(github.event.head_commit.message, '[skip rel]') }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0' 
        submodules: 'true'

    - uses: szenius/set-timezone@v1.0
      with:
        timezoneLinux: "Asia/Kolkata"
        timezoneMacos: "Asia/Kolkata"
        timezoneWindows: "Indian Standard Time"

    - name: Export build branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: branch_name

    - name: Update Debian/Ubuntu Repositories
      run: sudo apt-get update

    - name: Install Debian/Ubuntu dependencies
      run: sudo apt-get install bzip2 lib32stdc++6 libc6-dev-i386 libncurses5 jq -y

    - name: Setup KernelSU
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          cd KernelSU
          echo "KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))" >> $GITHUB_ENV
          cd -

    - name: Build Mint kernel
      run: |
          set -eo pipefail
          echo "  I: Building Mint kernel ${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER}"
          ./build.sh --kernelsu --automated --device a50 --variant aosp --android 12 --permissive

    - name: Prepare release package
      run: |
          mkdir -p ./release
          mv -f `find ./ -iname *.zip` ./release/

    - name: Prepare build config artifact
      run: |
          cp .config ./release/kernel_config_a50_aosp-s-k-p.txt

    - name: Upload build to Telegram
      uses: appleboy/telegram-action@master
      env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: " "
        document: ./release/*.zip

  ksumanager:
    name: Download ksu latest manager
    needs: [oneui-s-k-e, oneui-s-k-p , aosp-s-k-e , aosp-s-k-p]
    runs-on: ubuntu-latest
    steps:
     - name: Download ksu latest manager
       id: download-artifact
       uses: dawidd6/action-download-artifact@v2
       with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build-manager.yml
          workflow_conclusion: completed
          branch: main
          event: push
          name: manager
          name_is_regexp: true
          path: ./tmp/
          repo: tiann/KernelSU
          check_artifacts: false
          search_artifacts: false
          skip_unpack: false
          if_no_artifact_found: fail
       
     - name: Upload Manager to Telegram
       uses: appleboy/telegram-action@master
       env: 
          TELEGRAM_TO: "${{ secrets.TELEGRAM_TO }}"
          TELEGRAM_TOKEN: "${{ secrets.TELEGRAM_TOKEN }}"
       with:
         to: ${{ secrets.TELEGRAM_TO }}
         token: ${{ secrets.TELEGRAM_TOKEN }}
         message: "Manager"
         document: ./tmp/manager/*.apk
         if-no-files-found: error

  del_runs:
#     needs: [oneui-s-k-e, oneui-s-k-p , aosp-s-k-e , aosp-s-k-p , ksumanager]
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
          delete_workflow_pattern: all
          delete_workflow_by_state_pattern: all
          delete_run_by_conclusion_pattern: all
